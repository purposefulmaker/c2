services:
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly
    ports:
      - "6379:6379"
    restart: unless-stopped

  auth-service:
    build:
      context: ./services/auth-service
    container_name: auth-service
    env_file:
      - ./services/auth-service/.env
    environment:
      - REDIS_HOST=dragonfly
      - REDIS_PORT=6379
      - NODE_ENV=development
      - FRONTEND_URL=http://localhost:3006
      - ENABLE_LOCAL_LOGIN=true
    depends_on:
      - dragonfly
    ports:
      - "8085:8085"
    restart: unless-stopped

  c2-backend:
    build:
      context: ./c2-backend
    container_name: c2-backend
    environment:
      - REDIS_URL=redis://dragonfly:6379
      - DATABASE_URL=sqlite+aiosqlite:///./c2.db
      - ENABLE_MOCK_DEVICES=true
      - JWT_SECRET=dev-backend-secret
    depends_on:
      - dragonfly
    ports:
      - "8000:8000"
    restart: unless-stopped

  c2-frontend:
    build:
      context: ./c2-frontend
    container_name: c2-frontend
    environment:
      - NEXT_PUBLIC_AUTH_URL=https://c2-auth.loca.lt
      - NODE_ENV=development
    ports:
      - "3006:3000"
    restart: unless-stopped

  bun-websocket:
    build:
      context: ./services/bun-websocket
    container_name: bun-websocket
    environment:
      - DRAGONFLY_URL=redis://dragonfly
      - REDIS_HOST=dragonfly
      - REDIS_PORT=6379
    depends_on:
      - dragonfly
    ports:
      - "3007:3000"
    restart: unless-stopped

  onvif-wrapper:
    build:
      context: ./services/onvif-wrapper
    container_name: onvif-wrapper
    environment:
      - DRAGONFLY_URL=redis://dragonfly
      - NODE_ENV=development
    depends_on:
      - dragonfly
    ports:
      - "8082:8082"
    restart: unless-stopped

  slew2-driver:
    build:
      context: ./services/slew2-driver
    container_name: slew2-driver
    environment:
      - REDIS_URL=redis://dragonfly
      - NODE_ENV=development
    depends_on:
      - dragonfly
    ports:
      - "8090:8090"
    restart: unless-stopped

  node-red:
    image: nodered/node-red:3.1
    container_name: node-red
    ports:
      - "3008:1880"        # host:container (kept >3005 as requested)
    environment:
      - TZ=UTC
    volumes:
      - node-red-data:/data
    restart: unless-stopped

  webhook-service:
    build: ./services/webhook-service
    container_name: c2-webhook-service
    ports:
      - "3010:3001"  # host:container
    environment:
      - NODE_ENV=development
      - PORT=3001
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    restart: unless-stopped

networks:
  default:
    driver: bridge

volumes:
  node-red-data: